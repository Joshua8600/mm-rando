#!/usr/bin/env python3

import argparse
import csv
import sys

def get_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-o', '--out', help='Output file path for asm file')
    parser.add_argument('--sort-in-place', action='store_true', help='Sort entries in CSV file by address')
    parser.add_argument('csv', help='CSV file containing mapping: address => symbol name')
    return parser

def write_asm(outfile, entries):
    outfile.write('; Generated by script: symbols.py\n')
    for entry in entries:
        address, label = entry[0], entry[1]
        outfile.write(f'.definelabel {label}, {address}\n')

def main():
    args = get_parser().parse_args()
    with open(args.csv, newline='') as csvfile:
        reader = csv.reader(csvfile)
        entries = tuple(reader)

    # Ensure entries are sorted.
    entries = sorted(entries)

    if args.sort_in_place:
        # If sorting in-place, write sorted entries back to CSV file.
        with open(args.csv, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerows(entries)
    else:
        # Generate armips asm for defining symbols.
        if args.out is not None:
            with open(args.out, 'w') as outfile:
                write_asm(outfile, entries)
        else:
            write_asm(sys.stdout, entries)

if __name__ == '__main__':
    main()
