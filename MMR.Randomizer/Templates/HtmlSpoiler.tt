<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="MMR.Randomizer.Extensions" #>
<html>
<head>
<style>
    body.dark-mode {
      background-color: #111;
      color: #ccc;
    }
    body.dark-mode a {
      color: #111;
    }
    body.dark-mode button {
      background-color: #ddd;
      color: #111;
    }

    body.light-mode {
      background-color: #eee;
      color: #111;
    }
    body.light-mode a {
      color: #111;
    }
    body.light-mode button {
      background-color: #111;
      color: #ccc;
    }

    th{ text-align:left }
    .region { text-align: center; font-weight: bold; }
    [data-content]:before { content: attr(data-content); }

    .dark-mode .spoiler{ background-color:#ccc }
    .dark-mode .spoiler:active { background-color: #111;  }
    .dark-mode .show-highlight .unavailable .newlocation { background-color: #500705; }
    .dark-mode .show-highlight .acquired .newlocation { background-color: #69591f; }
    .dark-mode .show-highlight .available .newlocation { background-color: #313776; }

    .light-mode .spoiler{ background-color:#111 }
    .light-mode .spoiler:active { background-color: #ccc;  }
    .light-mode .show-highlight .unavailable .newlocation { background-color: #FF9999; }
    .light-mode .show-highlight .acquired .newlocation { background-color: #99FF99; }
    .light-mode .show-highlight .available .newlocation { background-color: #9999FF; }


    #spoilerLogState { width: 560px; }
</style>
</head>
<body class="light-mode">
<label><b>Version: </b></label><span><#= spoiler.Version #></span><br/>
<label><b>Settings: </b></label><code style="word-break: break-all;"><#= spoiler.SettingsString #></code><br/>
<label><b>Seed: </b></label><span><#= spoiler.Seed #></span><br/>
<br/>
<button type="button" onclick="toggleDarkLight()" title="Toggle dark/light mode">Toggle Dark Theme</button>
<br/>
<br/>
<label><b>Spoiler Log State: </b></label><input id="spoilerLogState" type="text"/><br/>
<# if (spoiler.DungeonEntrances.Any()) { 
#>
<h2>Dungeon Entrance Replacements</h2>
<table border="1" class="item-replacements">
    <tr>
        <th>Entrance</th>
        <th></th>
        <th>New Destination</th>
    </tr>
<#         foreach (var kvp in spoiler.DungeonEntrances) {
            var entrance = kvp.Key;
            var destination = kvp.Value;#>
    <tr data-id="<#= (int)destination #>" data-newlocationid="<#= (int)entrance #>" class="unavailable">
        <td class="newlocation"><#= entrance.Entrance() #></td>
        <td><input type="checkbox"/></td>
        <td class="spoiler itemname"><span data-content="<#= destination.Entrance() #>"></span></td>
    </tr>
<# } #>
</table>
<# } #>
<h2>Item Replacements</h2>
<input type="checkbox" id="highlight-checks"/> Highlight available checks
<table border="1" class="item-replacements">
 <tr>
     <th>Location</th>
     <th></th>
     <th></th>
 </tr>
<# foreach (var region in spoiler.ItemList.GroupBy(item => item.Region).OrderBy(g => g.Key)) {
#>
 <tr class="region"><td colspan="3"><#= region.Key.Name() #></td></tr>
 <# foreach (var item in region.OrderBy(item => item.NewLocationName)) { #>
 <tr data-id="<#= item.Id #>" data-newlocationid="<#= item.NewLocationId #>" class="unavailable">
    <td class="newlocation"><#= item.NewLocationName #></td>
    <td><input type="checkbox"/></td>
    <td class="spoiler itemname"> <span data-content="<#= item.Name #>"></span></td>
 </tr>
 <# } #>
<# } #>
</table>
<h2>Item Locations</h2>
<table border="1" id="item-locations">
 <tr>
     <th>Item</th>
     <th></th>
     <th>Location</th>
 </tr>
<# foreach (var item in spoiler.ItemList.Where(item => !item.IsJunk)) {
#>
 <tr data-id="<#= item.Id #>" data-newlocationid="<#= item.NewLocationId #>">
    <td><#= item.Name #></td>
    <td><input type="checkbox"/></td>
    <td class="spoiler newlocation"> <span data-content="<#= item.NewLocationName #>"></span></td>
 </tr>
<# } #>
</table>
<# if (spoiler.GossipHints != null && spoiler.GossipHints.Any()) { 
#>
<h2>Gossip Stone Hints</h2>
<table border="1">
    <tr>
        <th>Gossip Stone</th>
        <th>Message</th>
    </tr>
<#    foreach (var hint in spoiler.GossipHints.OrderBy(h => h.Key.ToString())) { 
#>
    <tr>
        <td><#= hint.Key #></td>
        <td class="spoiler"><span data-content="<#= hint.Value #>"></span></td>
    </tr>
<# } #>
</table>
<# } #>
<script>
    function all(list, predicate) {
        for (var i = 0; i < list.length; i++) {
            if (!predicate(list[i])) {
                return false;
            }
        }
        return true;
    }

    function any(list, predicate) {
        for (var i = 0; i < list.length; i++) {
            if (predicate(list[i])) {
                return true;
            }
        }
        return false;
    }

    function includes(list, item) {
        for (var i = 0; i < list.length; i++) {
            if (list[i] === item) {
                return true;
            }
        }
        return false;
    }
    
    var segmentSize = 16;
    function saveItems() {
        var segments = [];
        for (var i = 0; i < logic.length; i++) {
            var segmentIndex = parseInt(i / segmentSize);
            segments[segmentIndex] = segments[segmentIndex] || 0;
            if (logic[i].Checked) {
                segments[parseInt(i / segmentSize)] += (1 << (i%segmentSize));
            }
        }
        var saveString = segments.map(function(s) {
            return s.toString(16);
        }).join("-");
        var saveInput = document.querySelector("#spoilerLogState");
        saveInput.value = saveString;
    }

    function loadItems() {
        var saveInput = document.querySelector("#spoilerLogState");
        var segments = saveInput.value.split("-");
        if (Math.ceil((logic.length - 1) / segmentSize) !== segments.length) {
            alert("Invalid Spoiler Log state");
            return;
        }
        segments = segments.map(function(segment) {
            return parseInt(segment, 16);
        });
        var itemsToCheck = [];
        for (var i = 0; i < segments.length; i++) {
            var segment = segments[i];
            for (var j = 0; j < segmentSize; j++) {
                var itemIndex = segmentSize * i + j;
                if (itemIndex < logic.length) {
                    var mark = ((segment >> j) % 2 == 1);
                    logic[itemIndex].Checked = mark;
                    var itemRow = document.querySelector("tr[data-newlocationid='" + itemIndex + "']");
                    if (itemRow) {
                        logic[itemRow.dataset.id].Acquired = mark;
                        if (!includes(itemsToCheck, itemRow.dataset.id)) {
                            itemsToCheck.push(itemRow.dataset.id);
                        }
                    } else {
                        logic[itemIndex].Acquired = mark;
                        if (!includes(itemsToCheck, itemIndex)) {
                            itemsToCheck.push(itemIndex);
                        }
                    }
                }
            }
        }
        checkItems(itemsToCheck);
    }

    document.querySelector("#spoilerLogState").addEventListener("keypress", function(event) {
        if (event.keyCode === 13) {
            loadItems();
        }
    });

    function checkLocations(locations) {
        var itemsToCheck = [];
        for (var i = 0; i < locations.length; i++) {
            var location = logic[locations[i]];
            location.IsAvailable = 
                (location.RequiredItemIds === null || location.RequiredItemIds.length === 0 || all(location.RequiredItemIds, function(id) { return logic[id].Acquired; }))
                && 
                (location.ConditionalItemIds === null || location.ConditionalItemIds.length === 0 || any(location.ConditionalItemIds, function(conditionals) { return all(conditionals, function(id) { return logic[id].Acquired; }); }));
            
            if (!location.Acquired && location.IsFakeItem && location.IsAvailable) {
                location.Acquired = true;
                itemsToCheck.push(locations[i]);
            }
            if (location.Acquired && location.IsFakeItem && !location.IsAvailable) {
                location.Acquired = false;
                itemsToCheck.push(locations[i]);
            }
        
            var locationRow = document.querySelector(".item-replacements tr[data-newlocationid='" + locations[i] + "']");
            if (locationRow) {
                locationRow.className = "";
                locationRow.classList.add(location.IsAvailable ? "available" : "unavailable");
                var itemName = locationRow.querySelector(".itemname");
                var checkbox = locationRow.querySelector("input");
                checkbox.checked = location.Checked;
                if (location.Checked) {
                    itemName.classList.remove("spoiler");
                } else {
                    itemName.classList.add("spoiler");
                }
            }
        
            var itemRow = document.querySelector("#item-locations tr[data-newlocationid='" + locations[i] + "']");
            if (itemRow) {
                var itemName = itemRow.querySelector(".newlocation");
                var checkbox = itemRow.querySelector("input");
                var item = logic[itemRow.dataset.id];
                checkbox.checked = item.Acquired;
                if (item.Acquired) {
                    itemName.classList.remove("spoiler");
                } else {
                    itemName.classList.add("spoiler");
                }
            }
        }
        if (itemsToCheck.length > 0) {
            checkItems(itemsToCheck);
        } else {
            saveItems();
        }
    }

    var logic = <#= spoiler.LogicJson #>;

    for (var i = 0; i < logic.length; i++) {
        var item = logic[i];
        if (item.Acquired) {
            item.Checked = true;
            document.querySelector("tr[data-newlocationid='" + i + "'] input").checked = true;
        }
        if (item.RequiredItemIds !== null) {
            for (var j = 0; j < item.RequiredItemIds.length; j++) {
                var id = item.RequiredItemIds[j];
                if (!logic[id].LocksLocations) {
                    logic[id].LocksLocations = [];
                }
                if (!includes(logic[id].LocksLocations, i)) {
                    logic[id].LocksLocations.push(i);
                }
            }
        }
        if (item.ConditionalItemIds !== null) {
            for (var k = 0; k < item.ConditionalItemIds.length; k++) {
                for (var j = 0; j < item.ConditionalItemIds[k].length; j++) {
                    var id = item.ConditionalItemIds[k][j];
                    if (!logic[id].LocksLocations) {
                        logic[id].LocksLocations = [];
                    }
                    if (!includes(logic[id].LocksLocations, i)) {
                        logic[id].LocksLocations.push(i);
                    }
                }
            }
        }
    }

    function checkItems(itemIds) {
        var locationsToCheck = [];
        for (var i = 0; i < itemIds.length; i++) {
            var itemId = itemIds[i];
            if (logic[itemId].LocksLocations) {
                for (var j = 0; j < logic[itemId].LocksLocations.length; j++) {
                    var locationId = logic[itemId].LocksLocations[j];
                    if (!includes(locationsToCheck, locationId)) {
                        locationsToCheck.push(locationId);
                    }
                }
            }
        }
        checkLocations(locationsToCheck);
    }

    var startingLocations = [0, 94, 274, 275, 276, 277];
    for (var id of startingLocations) {
        logic[id].Checked = true;
        var itemId = document.querySelector("tr[data-newlocationid='" + id + "']").dataset.id;
        logic[itemId].Acquired = true;
        document.querySelector("tr[data-newlocationid='" + id + "'] input").checked = true;
    }

    var allLocationIds = [];
    for (var i = 0; i < logic.length; i++) {
        allLocationIds.push(i);
    }
    checkLocations(allLocationIds);

    var rows = document.querySelectorAll("tr");
    for (var i = 1; i < rows.length; i++) {
        var row = rows[i];
        var checkbox = row.querySelector("input");
        if (checkbox) {
            checkbox.addEventListener("click", function(e) {
                var row = e.target.closest("tr");
                var rowId = parseInt(row.dataset.id);
                var newLocationId = parseInt(row.dataset.newlocationid);
                logic[newLocationId].Checked = e.target.checked;
                logic[rowId].Acquired = e.target.checked;
                checkLocations([newLocationId]);
                checkItems([rowId]);
            });
        }
    }

    document.querySelector("#highlight-checks").addEventListener("click", function(e) {
        var tables = document.querySelectorAll("table.item-replacements");
        for (var i = 0; i < tables.length; i++) {
            if (e.target.checked) {
                tables[i].classList.add("show-highlight");
            } else {
                tables[i].classList.remove("show-highlight");
            }
        }
    });

    function toggleDarkLight() {
        var body = document.getElementsByTagName('body')[0];
        var currentClassBody = body.className;
        body.className = currentClassBody === "dark-mode" ? "light-mode" : "dark-mode";
    }
</script>
</body>
</html>
